Source: golang-github-go-errors-errors
Section: devel
Priority: optional
Maintainer: Debian Go Packaging Team <pkg-go-maintainers@lists.alioth.debian.org>
Uploaders: Rock Storm <rockstorm@gmx.com>
Build-Depends: debhelper (>= 10),
               dh-golang,
               golang-any
Standards-Version: 4.1.1
Homepage: https://github.com/go-errors/errors
Vcs-Browser: https://anonscm.debian.org/cgit/pkg-go/packages/golang-github-go-errors-errors.git
Vcs-Git: https://anonscm.debian.org/git/pkg-go/packages/golang-github-go-errors-errors.git
XS-Go-Import-Path: github.com/go-errors/errors
Testsuite: autopkgtest-pkg-go

Package: golang-github-go-errors-errors-dev
Architecture: all
Depends: ${shlibs:Depends},
         ${misc:Depends}
Description: errors with stacktraces for go
 Package errors adds stacktrace support to errors in go.
 .
 This is particularly useful when you want to understand the state of
 execution when an error was returned unexpectedly.
 .
 It provides the type *Error which implements the standard golang error
 interface, so you can use this library interchangably with code that is
 expecting a normal error return.  Usage Full documentation is available
 on godoc (https://godoc.org/github.com/go-errors/errors), but here's a
 simple example:
 .
 ```go package crashy
 .
 import "github.com/go-errors/errors"
 .
 var Crashed = errors.Errorf("oh dear")
 .
 func Crash() error {
     return errors.New(Crashed)
 } ```
 .
 This can be called as follows:
 .
 ```go package main
 .
 import (
     "crashy" "fmt" "github.com/go-errors/errors"
 )
 .
 func main() {
     err := crashy.Crash() if err != nil {
         if errors.Is(err, crashy.Crashed) {
             fmt.Println(err.(*errors.Error).ErrorStack())
         } else {
             panic(err)
         }
     }
 } ``` Meta-fu This package was original written to allow
 reporting to Bugsnag (https://bugsnag.com/) from bugsnag-go
 (https://github.com/bugsnag/bugsnag-go), but after I found similar
 packages by Facebook and Dropbox, it was moved to one canonical location
 so everyone can benefit.
 .
 This package is licensed under the MIT license, see LICENSE.MIT for
 details.
